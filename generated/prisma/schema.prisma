// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String?
  name     String?
  picture  String?
  role     String   @default("user")
  enabled  Boolean  @default(true)
  address  String?
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  orders   Order[]
  carts    Cart[]
}

model Product {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  price       Float
  sold        Int              @default(0)
  quantity    Int
  createAt    DateTime         @default(now())
  updateAt    DateTime         @updatedAt
  orderItems  ProductOnOrder[]
  images      Image[]
  cartItems   ProductOnCart[]
}

model Order {
  id          Int              @id @default(autoincrement())
  cartTotal   Float
  orderStatus String           @default("Not Process")
  createAt    DateTime         @default(now())
  updateAt    DateTime         @updatedAt
  products    ProductOnOrder[]
  orderedBy   User             @relation(fields: [orderById], references: [id])
  orderById   Int
}

model ProductOnOrder {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  price     Float
  count     Int
}

model Category {
  id       Int      @id @default(autoincrement())
  name     String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Cart {
  id        Int             @id @default(autoincrement())
  cartTotal Float
  createAt  DateTime        @default(now())
  updateAt  DateTime        @updatedAt
  orderedBy User            @relation(fields: [orderById], references: [id])
  orderById Int
  products  ProductOnCart[]
}

model ProductOnCart {
  id        Int     @id @default(autoincrement())
  price     Float
  count     Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
}
